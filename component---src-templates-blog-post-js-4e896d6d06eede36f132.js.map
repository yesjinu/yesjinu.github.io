{"version":3,"file":"component---src-templates-blog-post-js-4e896d6d06eede36f132.js","mappings":"0MAuBA,EArBe,WACb,IAAMA,EAAc,CAClB,sDACA,yEACA,iEACA,kDACA,4EAGIC,EAAc,WAClB,IAAMC,EAASC,KAAKC,MAAMD,KAAKD,SAAWF,EAAYK,QACtD,OAAOL,EAAYE,IAGrB,OACE,qBAAGI,UAAU,mBACX,gBAACL,EAAD,QC0CN,EA/CY,WAAO,IAAD,IACVM,GAAOC,EAAAA,EAAAA,gBAAe,cAgBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OACjCG,EAAU,UAAGL,EAAKG,KAAKC,oBAAb,aAAG,EAAwBE,IAAIC,OAE/C,OACE,gBAACC,EAAA,EAAD,CAAMT,UAAU,SACd,uBAAKA,UAAU,0CACb,gBAAC,EAAD,OAEF,uBAAKA,UAAU,gCACb,gBAAC,EAAAU,EAAD,CACEV,UAAU,oBACVW,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,+BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARN,qBAUA,2BACE,gBAAC,EAAAC,KAAD,CAAMlB,UAAU,4BAA4BmB,GAAIb,EAAYc,OAAO,UAChEjB,EAAOkB,MAEV,yBAAIlB,EAAOmB,c,iFCarB,UA3DyB,SAAC,GAAwB,IAAD,EAArBrB,EAAqB,EAArBA,KAAMsB,EAAe,EAAfA,SAC1BC,EAAOvB,EAAKwB,eACZC,GAAY,UAAAzB,EAAKG,KAAKC,oBAAV,eAAwBsB,QAAxB,QACVC,EAAmB3B,EAAnB2B,SAAUC,EAAS5B,EAAT4B,KAElB,OACE,gBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GACjC,gBAAC,IAAD,CACEC,MAAOH,EAAKM,YAAYH,MACxBI,YAAaP,EAAKM,YAAYC,aAAeP,EAAKQ,UAEpD,2BACEhC,UAAU,YACViC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYX,EAAKM,YAAYH,OAC1C,yBAAIH,EAAKM,YAAYM,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQd,EAAKe,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAD,QAGJ,uBAAKnC,UAAU,iBACb,sBACEwC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGjB,GACC,gBAAC,EAAAV,KAAD,CAAMC,GAAIS,EAASkB,OAAOC,KAAMC,IAAI,QAApC,KACKpB,EAASE,YAAYH,QAI9B,0BACGE,GACC,gBAAC,EAAAX,KAAD,CAAMC,GAAIU,EAAKiB,OAAOC,KAAMC,IAAI,QAC7BnB,EAAKC,YAAYH,MADpB,Y","sources":["webpack://gatsby-starter-blog/./src/components/Bio/Quotes/index.js","webpack://gatsby-starter-blog/./src/components/Bio/index.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from \"react\"\n\nconst Quotes = () => {\n  const QUOTES_LIST = [\n    \"The best way to predict the future is to invent it.\",\n    \"The future belongs to those who believe in the beauty of their dreams.\",\n    \"The future is already here — it’s just not evenly distributed.\",\n    \"The future is not a gift, it is an achievement.\",\n    \"The future is not something we enter. The future is something we create.\",\n  ]\n\n  const RandomQuote = () => {\n    const random = Math.floor(Math.random() * QUOTES_LIST.length)\n    return QUOTES_LIST[random]\n  }\n\n  return (\n    <p className=\"text-3xl italic\">\n      <RandomQuote />\n    </p>\n  )\n}\n\nexport default Quotes\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport Grid from \"../Layout/Grid\"\nimport Quotes from \"./Quotes\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          url {\n            resume\n          }\n        }\n      }\n    }\n  `)\n\n  const author = data.site.siteMetadata?.author\n  const resumeLink = data.site.siteMetadata?.url.resume\n\n  return (\n    <Grid className=\"py-10\">\n      <div className=\"col-span-1 md:col-span-1 lg:col-span-2\">\n        <Quotes />\n      </div>\n      <div className=\"flex items-center col-span-1\">\n        <StaticImage\n          className=\"mr-4 rounded-full\"\n          layout=\"fixed\"\n          formats={[\"auto\", \"webp\", \"avif\"]}\n          src=\"../../images/profile-pic.png\"\n          width={50}\n          height={50}\n          quality={95}\n          alt=\"Profile picture\"\n        />\n        <div>\n          <Link className=\"hover:underline font-bold\" to={resumeLink} target=\"_blank\">\n            {author.name}\n          </Link>\n          <p>{author.summary}</p>\n        </div>\n      </div>\n    </Grid>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/Bio\"\nimport Layout from \"../components/Layout/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["QUOTES_LIST","RandomQuote","random","Math","floor","length","className","data","useStaticQuery","author","site","siteMetadata","resumeLink","url","resume","Grid","S","layout","formats","src","width","height","quality","alt","Link","to","target","name","summary","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","description","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}